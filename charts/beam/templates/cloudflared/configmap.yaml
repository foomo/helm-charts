{{- if .Values.cloudflared.enabled }}
  apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "beam.cloudflared.fullname" . }}
  labels:
    {{- include "beam.cloudflared.labels" . | nindent 4 }}
  namespace: {{ include "beam.namespace" . }}
data:
  config.yaml: |
    # Name of the tunnel you want to run
    tunnel: {{ .Values.cloudflared.tunnelName }}
    # The location of the secret containing the tunnel credentials
    credentials-file: /etc/cloudflared/creds/credentials.json
    # General purpose TCP routing for the network
    warp-routing:
      enabled: {{ .Values.cloudflared.enableWarp }}
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    ingress:
      {{- with .Values.cloudflared.ingress }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
      - service: http_status:404
  {{- if .Values.cloudflaredSplitter.enabled }}
  nginx.conf: |
    user  nginx;
    worker_processes  auto;

    error_log  /dev/stdout notice;
    pid        /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      default_type  application/octet-stream;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /dev/stdout  main;
      sendfile        on;
      keepalive_timeout  65;
    }
    stream {
      map_hash_max_size 256;
      map_hash_bucket_size 256;

      map $ssl_preread_server_name $name {
        {{- if .Values.pinniped.concierge.enabled }}
        {{ include "beam.fullname" $ }}-pinniped-concierge-impersonation-proxy-cluster-ip.{{ .Release.Namespace }} concierge;
        {{- range $k, $v := .Values.pinniped.concierge.jwtAuths }}
        {{ get (urlParse $v.issuer) "host" }} jwt-auth-{{ $k }};
        {{- end }}
        {{- end }}
        {{- range $k, $v := .Values.cloudflaredSplitter.beams }}
        {{ $v }} {{ $k }};
        {{- end }}
        default https_default_backend;
      }

      {{- if .Values.pinniped.concierge.enabled }}
      upstream concierge {
        server {{ include "beam.fullname" $ }}-pinniped-concierge-impersonation-proxy-cluster-ip.{{ .Release.Namespace }}:443;
      }
      {{- range $k, $v := .Values.pinniped.concierge.jwtAuths }}
      upstream jwt-auth-{{ $k }} {
        server {{ get (urlParse $v.issuer) "host" }}:443;
      }
      {{- end }}
      {{- end }}
      {{- range $k, $v := .Values.cloudflaredSplitter.beams }}
      upstream {{ $k }} {
        server {{ $v }}:443;
      }
      {{- end }}
      upstream https_default_backend {
        server 127.0.0.1:443;
      }

      server {
        listen 443;
        proxy_pass $name;
        ssl_preread on;
      }
    }
  {{- end }}
{{- end }}
