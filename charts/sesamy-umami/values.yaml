# -- Overrides the chart's name
nameOverride: ""
# -- Overrides the chart's computed fullname
fullnameOverride: ""
# -- The name of the Namespace to deploy
# If not set, `.Release.Namespace` is used
namespaceOverride: ''

# -- Number of revisions to retain to allow rollback
revisionHistoryLimit: 10

# TLS Reverse Proxy configurations
# All urls have to be valid https urls, so proxy https traffic to your containers.
# Create a self-signed certificate by running
# $ openssl req -x509 -newkey rsa:2048 -keyout tls.key -out tls.crt -nodes -subj '/CN=sesamy'
proxy:
  # TLS configuration
  tls:
    # -- Base64 encoded TLS key
    key: ""
    # -- Base64 encoded TLS cert
    crt: ""
  # Docker image
  image:
    # -- The image repository
    repository: 'nginx'
    # -- The image pull policy
    pullPolicy: IfNotPresent
    # -- The image tag
    tag: '1.25-alpine'
  # -- Resource request & limits.
  resources: {}
  # -- Nginx SSL Reverse Proxy config.
  # The value is templated using `tpl`.
  # -- See values.yaml
  config: |
    server {
      listen              443 ssl;

      ssl_certificate     /etc/nginx/ssl/tls.crt;
      ssl_certificate_key /etc/nginx/ssl/tls.key;
      ssl_session_cache   shared:SSL:10m;
      ssl_session_timeout 1h;
      ssl_buffer_size     8k;

      location / {
          proxy_pass         http://0.0.0.0:{{ .Values.umami.service.port }};
          proxy_set_header   Host $host;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host $server_name;
          proxy_set_header   Upgrade $http_upgrade;
          proxy_set_header   Connection 'upgrade';
          proxy_cache_bypass $http_upgrade;
      }
    }

# Umami
umami:
  # Umami configurations
  config:
    # -- Disables users, teams, and websites settings page.
    cloudMode: '1'
    # -- HTTP header to check for the client's IP address. This is useful when you're behind a proxy that uses non-standard headers.
    clientIpHeader: ''
    # -- Allows you to send metrics to a location different than the default `/api/send`. This is to help you avoid some ad-blockers.
    collectApiEndpoint: ''
    # -- How many seconds a CORS preflight should last. Default is 24 hours.
    corsMaxAge: '86400'
    # -- By default bots are excluded from statistics. This disables checking for bots.
    disableBotCheck: '1'
    # -- Disables the login page for the application
    disableLogin: '1'
    # -- setting this to true removes the environment variable DISABLE_LOGIN defined in `umami.disableLogin` from the deployment as this caused errors in some setups
    removeDisableLoginEnv: true
    # -- Umami collects completely anonymous telemetry data in order help improve the application. You can choose to disable this if you don't want to participate.
    disableTelemetry: "1"
    # -- Disables the check for new versions of Umami
    disableUpdates: "1"
    # -- Enables the internal test page, {host}/console. Admin access is required. Users can manually fire pageviews and events to their websites.
    enableTestConsole: "1"
    # -- This will redirect all requests from http to https in the Umami application. Note, this does not apply to the tracking script.
    forceSSL: "1"
    # -- hostname under which Umami will be reached
    hostname: "0.0.0.0"
    # -- This will do a DNS lookup on a hostname and the resulting IP address will be ignored. This can be a comma delimited list of hostnames.
    ignoreHostname: ""
    # -- You can provide a comma-delimited list of IP address to exclude from data collection.
    ignoredIpAddresses: ""
    # -- If you are running in development mode, this will log database queries to the console for debugging.
    logQuery: "1"
    # -- Removes the trailing slash from all incoming urls.
    removeTrailingSlash: "1"
    # -- Allows you to assign a custom name to the tracker script different from the default umami. This is to help you avoid some ad-blockers.
    trackerScriptName: "umami"
    # App secret configurations
    appSecret:
      # -- A random string used to generate unique values.
      secret: ""
      # -- Name of an existing secret containing the app secret under the key app-secret.
      existingSecret: ""
      # -- Key in the existing secret containing the value (default: app-secret)
      existingSecretKey: ""
    # Database configurations
    database:
      # -- Full connection string
      uri: ""
      auth:
        # -- Database name
        database: ""
        # -- Database username
        username: ""
        # -- Database password
        password: ""
        # -- Database hostname
        hostname: ""
      # -- Use an existing secret containing the database uri.
      existingSecret: ""
      # -- Key in the existing secret containing value (default: database-url)
      existingSecretKey: ""
  # Your custom collect image
  image:
    # -- The image registry
    registry: ghcr.io
    # -- The image repository
    repository: umami-software/umami
    # -- The image pull policy
    pullPolicy: IfNotPresent
    # -- The image tag
    tag: postgresql-v2.11.3
  # -- Number of replicas
  replicaCount: 1
  # -- Pod Disruption Budget maxUnavailable
  maxUnavailable: null
  # -- Host aliases to add
  hostAliases: []
  #  - ip: 1.2.3.4
  #    hostnames:
  #      - domain.tld
  # -- Image pull secrets
  imagePullSecrets: []
  # -- Annotations for pods
  podAnnotations: {}
  # -- Labels for pods
  podLabels: {}
  # -- The SecurityContext for pods
  podSecurityContext: {}
  #  fsGroup: 2000
  securityContext: {}
  #  capabilities:
  #    drop:
  #      - ALL
  #  readOnlyRootFilesystem: true
  #  runAsNonRoot: true
  #  runAsUser: 1000
  service:
    # -- Port of the service
    port: 8000
    # -- Type of the service
    type: ClusterIP
    # -- Annotations for the service
    annotations: {}
    # -- Labels for service
    labels: {}
  # -- Resource request & limits.
  resources: {}
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  # -- Startup probe settings for pods.
  startupProbe: {}
  #  httpGet:
  #    path: /healthz
  #    port: http
  # -- Readiness probe settings for pods.
  readinessProbe:
    httpGet:
      path: /
      port: http
  # -- Liveness probe settings for pods.
  livenessProbe:
    httpGet:
      path: /
      port: http
  autoscaling:
    # -- Enable autoscaling
    enabled: false
    # -- Minimum autoscaling replicas
    minReplicas: 1
    # -- Maximum autoscaling replicas
    maxReplicas: 100
    # -- Target CPU utilisation percentage
    targetCPUUtilizationPercentage: 80
    # -- Target memory utilisation percentage
    targetMemoryUtilizationPercentage: null
    # -- Custom metrics using the HPA/v2 schema (for example, Pods, Object or External metrics)
    customMetrics: []
    #  - type: Pods
    #    pods:
    #      metric:
    #        name: loki_lines_total
    #      target:
    #        type: AverageValue
    #        averageValue: 10k
    behavior:
      # -- Enable autoscaling behaviours
      enabled: false
      # -- Scale down policies, must conform to HPAScalingRules
      scaleDown: {}
      # -- Scale up policies, must conform to HPAScalingRules
      scaleUp: {}
  # -- Environment variables to add
  extraEnv: []
  # -- Port definitions to add
  extraPorts: []
  # -- Environment variables from secrets or configmaps to add
  extraEnvFrom: []
  # -- Volume mounts to add
  extraVolumeMounts: []
  #  - name: foo
  #    mountPath: "/etc/foo"
  #    readOnly: true
  # -- Volumes to add
  extraVolumes: []
  #  - name: foo
  #    secret:
  #      secretName: mysecret
  #      optional: false
  # -- Tolerations settings for pods.
  nodeSelector: {}
  # -- Tolerations settings for pods.
  tolerations: []
  # -- Affinity settings for pods.
  affinity: {}
  # -- DNSConfig settings for pods.
  dnsConfig: {}

# Ingress configuration
ingress:
  # -- Enable ingress
  enabled: false
  # -- Ingress class name
  className: ""
  annotations: {}
  paths:
    umami:
      - path: /
        pathType: Prefix
        port: 8000
  hosts:
    - example.com
  tls: []
  #  - secretName: example-com-tls
  #    hosts:
  #      - example.com

# ServiceAccount configuration
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # -- If not set and create is true, a name is generated using the fullname template
  name: ""

# ServiceMonitor configuration
serviceMonitor:
  # -- If enabled, ServiceMonitor resources for Prometheus Operator are created
  enabled: false
  # -- Alternative namespace for ServiceMonitor resources
  namespace: null
  # -- Namespace selector for ServiceMonitor resources
  namespaceSelector: {}
  # -- Optional expressions to match on
  matchExpressions: []
  #  - key: prometheus.io/service-monitor
  #    operator: NotIn
  #    values:
  #      - "false"
  # -- ServiceMonitor annotations
  annotations: {}
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- ServiceMonitor scrape interval
  interval: null
  # -- ServiceMonitor scrape timeout in Go duration format (e.g. 15s)
  scrapeTimeout: null
  # -- ServiceMonitor relabel configs to apply to samples before scraping
  # https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
  relabelings: []
  # -- ServiceMonitor metric relabel configs to apply to samples before ingestion
  # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint
  metricRelabelings: []
  ##ServiceMonitor will add labels from the service to the Prometheus metric
  # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitorspec
  targetLabels: []
  # -- ServiceMonitor will use http by default, but you can pick https as well
  scheme: http
  # -- ServiceMonitor will use these tlsConfig settings to make the health check requests
  tlsConfig: null

# NetworkPolicy configuration
networkPolicy:
  # -- Specifies whether Network Policies should be created
  enabled: false
  metrics:
    # -- Specifies the Pods which are allowed to access the metrics port.
    # As this is cross-namespace communication, you also need the namespaceSelector.
    podSelector: {}
    # -- Specifies the namespaces which are allowed to access the metrics port
    namespaceSelector: {}
    # -- Specifies specific network CIDRs which are allowed to access the metrics port.
    # In case you use namespaceSelector, you also have to specify your kubelet networks here.
    # The metrics ports are also used for probes.
    cidrs: []
  ingress:
    # -- Specifies the Pods which are allowed to access the http port.
    # As this is cross-namespace communication, you also need the namespaceSelector.
    podSelector: {}
    # -- Specifies the namespaces which are allowed to access the http port
    namespaceSelector: {}
  externalStorage:
    # -- Specify the port used for external storage, e.g. AWS S3
    ports: []
    # -- Specifies specific network CIDRs you want to limit access to
    cidrs: []
  discovery:
    # -- Specify the port used for discovery
    port: null
    # -- Specifies the Pods labels used for discovery.
    # As this is cross-namespace communication, you also need the namespaceSelector.
    podSelector: {}
    # -- Specifies the namespace the discovery Pods are running in
    namespaceSelector: {}

# RBAC configuration
rbac:
  # -- Create PodSecurityPolicy.
  enabled: false
