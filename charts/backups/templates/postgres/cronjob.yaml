{{- if .Values.postgres.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "backups.postgres.fullname" . }}
  labels: {{- include "backups.postgres.labels" . | nindent 4 }}
  namespace: {{ include "backups.namespace" . }}
spec:
  schedule: {{ quote .Values.cronjob.schedule }}
  concurrencyPolicy: {{ .Values.cronjob.concurrency }}
  failedJobsHistoryLimit: {{ .Values.cronjob.failedJobsHistoryLimit }}
  successfulJobsHistoryLimit: {{ .Values.cronjob.successfulJobsHistoryLimit }}
  {{- if .Values.cronjob.startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ .Values.cronjob.startingDeadlineSeconds }}
  {{- end }}
  jobTemplate:
    spec:
      {{- if .Values.cronjob.backoffLimit }}
      backoffLimit: {{ .Values.cronjob.backoffLimit }}
      {{- end }}
      {{- if .Values.cronjob.ttlSecondsAfterFinished }}
      ttlSecondsAfterFinished: {{ .Values.cronjob.ttlSecondsAfterFinished }}
      {{- end }}
      template:
        spec:
          restartPolicy: {{ .Values.cronjob.restart }}
          serviceAccountName: {{ include "backups.serviceAccountName" . }}
          initContainers:
            - name: dump
              image: {{ .Values.postgres.image }}
              command: {{- include "backups.postgres.pgdumpCommand" . | nindent 16 }}
              env:
                - name: PGUSER
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "backups.postgres.fullname" . }}
                      key: PGUSER
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "backups.postgres.fullname" . }}
                      key: PGPASSWORD
                {{- with .Values.postgres.dump.extraEnv }}
                {{- toYaml . | nindent 16 }}
                {{- end }}
              volumeMounts:
                - name: data
                  mountPath: /backup
          containers:
            - name: upload
              image: {{ include "backups.upload.image" . }}
              imagePullPolicy: IfNotPresent
              command: {{ include "backups.postgres.uploadCommand" . | trim | nindent 16 }}
              env:
                {{- if eq .Values.upload.type "s3" }}
                {{- if .Values.upload.s3 }}
                  - name: AWS_ACCESS_KEY_ID
                    value: {{ .Values.upload.s3.accessKey }}
                {{- end }}
                {{- if .Values.upload.s3.secretAccessKey }}
                  - name: AWS_SECRET_ACCESS_KEY
                    value: {{ .Values.upload.s3.secretAccessKey }}
                {{- end }}
                {{- end }}
                {{- with .Values.postgres.upload.extraEnv }}
                {{- toYaml . | nindent 16 }}
                {{- end }}
              volumeMounts:
                - name: data
                  mountPath: /backup
          volumes:
            - name: data
              emptyDir: {}
{{- end }}
